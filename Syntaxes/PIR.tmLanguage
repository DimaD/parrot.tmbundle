<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>pir</string>
	</array>
	<key>foldingStartMarker</key>
	<string>\.sub</string>
	<key>foldingStopMarker</key>
	<string>\.end</string>
	<key>keyEquivalent</key>
	<string>^~P</string>
	<key>name</key>
	<string>Parrot PIR</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>string.quoted.double.pir</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escaped.pir</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>end</key>
			<string>'</string>
			<key>name</key>
			<string>string.quoted.single.pir</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escaped.pir</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(print|save|restore)\b</string>
			<key>name</key>
			<string>support.function.pir</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(if|unless|goto|\.return|\.end|\.emit|\.eot)</string>
			<key>name</key>
			<string>keyword.control.pir</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\.(pcc_begin|pcc_end|pcc_call|nci_call|invocant|meth_call|arg|result|pcc_begin_return|pcc_end_return|pcc_begin_yield|pcc_end_yield|yield))</string>
			<key>name</key>
			<string>keyword.control.pcc.pir</string>
		</dict>
		<dict>
			<key>match</key>
			<string>([SNIP]\d+)</string>
			<key>name</key>
			<string>variable.other.register.pir</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\$[SNIP]\d+)</string>
			<key>name</key>
			<string>variable.other.register.symbolic.pir</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Label</string>
			<key>match</key>
			<string>^\s*(\S+:)\s*</string>
			<key>name</key>
			<string>keyword.other.label.pir</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(int|float|string|pmc|array|\.Array|\.Sub)</string>
			<key>name</key>
			<string>storage.type.pir</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\.(namespace|endnamespace)</string>
			<key>name</key>
			<string>storage.type.pir</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\.(local|arg|lex|param|global|const)</string>
			<key>name</key>
			<string>storage.modifier.pir</string>
		</dict>
		<dict>
			<key>match</key>
			<string>!|-|~</string>
			<key>name</key>
			<string>keyword.operator.unary.pir</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+|-|/|\*\*|\*|%|&lt;&lt;|&gt;&gt;|&lt;&gt;|&amp;&amp;|\|\||~~|\||&amp;|~|\.</string>
			<key>name</key>
			<string>keyword.operator.binary.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+=|-=|\=|%=|\*=|\.=|&amp;=|\|=|~=|&lt;&lt;=|&gt;&gt;=|&lt;&gt;=</string>
			<key>name</key>
			<string>keyword.operator.assign.ruby</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.sub.pir</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.pir</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.sub_pragma.pir</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.other.vtable_pragma.pir</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.other.multi_pragma.pir</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>keyword.other.outer_pragma.pir</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
				\s* (\.sub) \s+ ([_a-zA-Z](?:[_a-zA-Z0-9]+)?)
				(?:\s+
					(?: (:(?:load|init|immediate|postcomp|main|anon|lex)) #sub_pragma
					| (:vtable \s* (?: \("\S+"\) )? ) #vtable_pragma
					| (:multi  \s* (?: \( \))? ) #multi_pragma
					| (:outer  \s* (?: \( \))? ) #outer_pragma
					)\s+
				)*</string>
			<key>name</key>
			<string>meta.function.pir</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Only allow word characters and punctuation to avoid false positives, since the availability of comments depend on regexp flags.</string>
			<key>match</key>
			<string>(#.+*|#\s*[a-zA-z0-9_:,.; ]+)$</string>
			<key>name</key>
			<string>comment.line.pir</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([_a-zA-Z]([_a-zA-Z0-9]+)?)\b</string>
			<key>name</key>
			<string>variable.other.identifier.pir</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.parrot.pir</string>
	<key>uuid</key>
	<string>74BEF177-5D2E-469A-BF43-441F1167AB95</string>
</dict>
</plist>
